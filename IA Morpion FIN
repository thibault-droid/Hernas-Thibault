#include <stdio.h>
#include <stdlib.h>

int somme_lignes(char damier[]) ;
int somme_colonnes(char damier[]) ;
int somme_diagonales(char damier[]) ;
int case_libre(char damier[], int case_) ;
int resultat(char damier[]) ;
int inserer_valeur_damier(char damier[] , int carre_magique[] , int case_ , int joueur ) ;
void affichage(char damier[]) ;
int choix_case(char damier[]) ;
int result_jeu(char damier[]);

typedef struct
{
 int case_suivante ;
 int somme ;
}T_branche ;

int explore(T_branche * branche, int joueur, char damier[], int a) ;
int somme_branches(T_branche tab[] , int nb_case) ;
int score(T_branche tab[], int nb_case) ;

char carre_magique[9] = {8,1,6,3,5,7,4,9,2};




int case_libre(char damier[], int i)                                                              //return 1 si moi, -1 si adversaire , 0 si vide
{
    if( damier[i] > 0 )return 1 ;
    else if(damier[i] < 0 ) return -1 ;
    else if(damier[i] == 0) return 0 ;
}


int resultat(char damier[])                                                                      // 1 partie finie , 0 partie en cours
{
    int i ;
    for(i = 0 ; i<9 ; i++)	if(damier[i] == 0)return 0 ;
    return 1 ;
}

int inserer_valeur_damier(char damier[] , int carre_magique[] , int case_ , int joueur )         // applique la valeur de la case lue au carre magique
{
    damier[case_] = joueur * carre_magique[case_] ;
    return 0 ;
}

int somme_lignes(char damier[])                                                                  //  return 1 si victoire, -1 si defaite, 0 si rien
{
    int i  , j ,somme;
    for(i = 0 ; i<3 ; i++)
    {
        somme = 0 ;
        for( j = i*3 ; j < i*3 + 3 ; j++)somme += damier[j] ;
        if(somme == 15)return 1 ;
        else if(somme == -15 ) return -1 ;
    }
    return 0 ;
}
int somme_colonnes(char damier[])                                                               //  return 1 si victoire, -1 si defaite, 0 si rien
{
    int i  , j ,somme;
    for(i = 0 ; i<3 ; i++)
    {
        somme = 0 ;
        for( j = i ; j < i+7 ; j+=3)somme += damier[j] ;
        if(somme == 15)return 1 ;
        else if(somme == -15 ) return -1 ;
    }
    return 0 ;
}

int somme_diagonales(char damier[])                                                             //  return 1 si victoire, -1 si defaite, 0 si rien
{
    int somme ;

    somme = damier[0] + damier[4] + damier [8] ;
    if(somme == 15)return 1 ;
    else if(somme == -15 ) return -1 ;
    somme = damier[2] + damier[4] + damier [6] ;
    if(somme == 15)return 1 ;
    else if(somme == -15 ) return -1 ;
    else return 0 ;
}

int result_jeu(char damier[])                                                                   //  return 1 si victoire, -1 si defaite, 0 si rien
{
    if		( (somme_lignes(damier))==1  || (somme_colonnes(damier))==1  || (somme_diagonales(damier))==1	) return 1;
    else if ( (somme_lignes(damier))==-1 || (somme_colonnes(damier))==-1 || (somme_diagonales(damier))==-1  ) return -1;
    else if ( (somme_lignes(damier))==0  || (somme_colonnes(damier))==0  || (somme_diagonales(damier))==0 	) return 0;
}

int explore(T_branche * branche, int joueur, char damier[],int a )                 // return 1 si la case est une  issue gagnante,  sinon 0 et met a jour le tableau de resultat d'exploration tab[]
{
    int cpt  = 0, j =0 ,tab_0[9] , i, somme = 0 ;
    T_branche * monTableau;
    char  damier_sauvegarde[9] ;

    for(i = 0 ; i < 9 ; i++)damier_sauvegarde[i] = damier[i] ;
    damier[branche[a].case_suivante] = joueur * carre_magique[branche[a].case_suivante] ;
    if(result_jeu(damier) == joueur )
    {
        damier[branche[a].case_suivante] = 0 ;
        return joueur;
    }

    else if(result_jeu(damier) == 0 || result_jeu(damier) == 1)
    {			    j = 0 ;
                    cpt = 0 ;
                    for(i=0;i<9;i++) if((case_libre(damier , i) )== 0)                              // compte le nombre de cases vides
                                     {
                                         cpt++;
                                         tab_0[j] = i ;
                                         j++ ;
                                     }
                     if(cpt == 0)return 0 ;
                     monTableau = (T_branche*) malloc (cpt*sizeof(T_branche));

                    for( i = 0 ; i<cpt ; i++)
                        {
                         monTableau[i].case_suivante = tab_0[i];
                         monTableau[i].somme = 0 ;
                         monTableau[i].somme = explore(monTableau  ,  -joueur , damier ,i) ;
                        }

                        for(i = 0 ; i<cpt ; i++)somme += monTableau[i].somme ;
                        for(i = 0 ; i <9 ; i++)damier[i] = damier_sauvegarde[i] ;
                        return somme ;
    }
}
int score(T_branche tab[],int nb_case)
{
int i;
T_branche min = tab[0] ;

for(i = 1 ; i <nb_case ; i++)
    {
     if(tab[i].somme == -1)return tab[i].case_suivante ;
     if(tab[i].somme <= min.somme)
        {
            if(tab[i].somme == min.somme)if(rand() % 2 == 0 ) min = tab[i] ;
            else min = tab[i] ;
        }
     }
return min.case_suivante;
}

int somme_branches(T_branche tab[] , int nb_case)
{
    int i, somme = 0 ;
    for(i = 0 ; i< nb_case ; i++)somme += tab[i].somme ;
    return somme ;
}

void affichage(char damier[])
{
int i ;
int symbole[9] ;
for(i = 0 ; i<9 ; i++ )
    {
        if(damier[i] > 0)symbole[i] = 1 ;
        else if (damier[i] < 0)symbole[i] = -1 ;
        else symbole[i] = 0;
    }

printf(" \n| %1d | %d | %1d |\n| %1d | %d | %1d |\n| %1d | %1d | %1d |\n",symbole[0] ,symbole[1] ,symbole[2] ,symbole[3] ,symbole[4] ,symbole[5] ,symbole[6] ,symbole[7] ,symbole[8]) ;
}

int choix_case(char damier[])
{
 int case_;
 printf("\nSaisissez la case de votre choix : ") ;
 scanf("%d",&case_) ;
 damier[case_] = carre_magique[case_] ;
 getchar() ;
 return 0 ;
}

int main()
{
    char   damier[9] = {0,0,0,0,0,0,0,0,0}, damier_sauvegarde[9] ;
    int tab_0[9], joueur = 1, tour, i, j,case_a_jouer, cpt = 0;
    T_branche monTableau[8];

    for(tour = 1 ; tour < 10 ; tour ++ )
    {
        if(joueur == 1 )
        {
        affichage(damier) ;
        choix_case(damier) ;
        joueur = -1 ;
        }

        else if(joueur == -1)
        {			case_a_jouer = 0 ;
                    j = 0 ;
                    cpt = 0 ;
                     for(i=0;i<9;i++)
                     {
                         damier_sauvegarde[i] = damier[i] ;
                         if((case_libre(damier , i) )== 0)                                       // compte le nombre de cases vides
                             {
                               cpt++;
                               tab_0[j] = i ;
                               j++ ;
                             }
                     }

                     for( i = 0 ; i<cpt ; i++)
                            {
                             monTableau[i].case_suivante = tab_0[i];
                             monTableau[i].somme = 0 ;
                             monTableau[i].somme = explore(monTableau  ,  joueur , damier ,i) ;
                            }

                      case_a_jouer = score( monTableau, cpt) ;
                      damier[case_a_jouer] = joueur * carre_magique[case_a_jouer] ;
                      joueur = 1 ;
        }
        if(tour > 4)
        {
            if(result_jeu(damier) == 1)
                {
                printf("\nL'humanite gagne !" ) ;
                getchar() ;
                 return 0 ;
                }
            else if(result_jeu(damier) == -1)
                {printf("\nLes machines nous surpassent !" ) ;
                getchar() ;
                return 0 ;
                }
            else if (tour == 9)
                {
                printf("\nEgalite ce n'est pas aujourd'hui que les machines nous dominent") ;
                return 0 ;
                 }
        }
    }
    return 0 ;
}
